/*
 * $Id: cgi.ici,v 1.5 2002/10/04 01:08:47 atrn Exp $
 */

/*
 * ICI module to interface with an HTTP server's Common Gateway Interface.
 *
 * The cgi module provides a number of functions to simplify writing
 * CGI "scripts" in ICI.  Functions are provided to retrieve data
 * sent to the CGI program as the result of a form's post and to
 * abstract the output side of a CGI program.
 * 
 *
 * This --intro-- forms part of the --ici-cgi-- documentation.
 */

/*
 * cgi.content_type(string) - generate a "Content-type" HTTP header
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
content_type(type)
{
    printf("Content-type: %s\r\n", type);
}

/*
 * cgi.content_length(length) - generate a "Content-Length" HTTP header
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
content_length(length)
{
    printf("Content-Length: %d\r\n", length);
}

/*
 * cgi.start_reply_header([key, val]...) - start CGI program output
 *
 * The cgi.start_reply_header() is used by a program to note the
 * start of its output.  If no parameters are given the function
 * does nothing and merely acts as a place-holder to match the
 * cgi.end_reply_header() function.  If parameters are given
 * they must be an even number of strings which are used to
 * output HTTP reply header values.  The first string in each
 * pair is the header's name with the second string of the pair
 * being its associated value.
 *
 * Note that the common HTTP header fields have their own functions.
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
start_reply_header()
{
    auto        vargs = [array];
    auto        i, n;

    if ((n = nels(vargs)) & 1)
        fail("uneven # of args to start_reply_header");
    for (i = 0; i < n; i += 2)
        printf("%s: %s\r\n", vargs[i], vargs[i+1]);
}

/*
 * cgi.end_reply_header() - output the end of header line (a blank line)
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
end_reply_header()
{
    printf("\r\n");
}

/*
 * cgi.status(code [, msg]) - generate a status CGI header
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
status(code, msg)
{
    printf("Status: %d", code);
    if (msg)
        printf(" %s", msg);
    printf("\r\n");
}

/*
 * cgi.no_content() - output a "no content" CGI status header
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
no_content()
{
    return status(204, "No Content");
}

/*
 * cgi.redirect([status,] url) - generate a redirect status
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
redirect(status, url)
{
    auto status_desc = [struct
        (301) = "Moved permanently",
        (302) = "Moved temporaily",
    ];
    if (url == NULL)
    {
        url = status;
        status = 302;
    }
    if (!(msg = status_desc[status]))
        msg = "Redirect";
    printf
    (
        "Status: %d %s\r\n"
        "Location: %s\r\n",
        status,
        msg,
        url
    );
    content_type("text/plain");
    end_reply_header();
    printf("Redirecting to %s\n", url);
}

/*
 * cgi.setcookie(string) - output an HTTP header to setting a cookie.
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
setcookie(text)
{
    printf("Set-cookie: \r\n", text);
}

/*
 * string = cgi.getcookie() - return the cookie for this request or NULL if no cookie.
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
getcookie()
{
    return getenv("HTTP_COOKIE");
}

/*
 * cgi.string_to_urle(string) - return the "URL" encoded form of a string
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
string_to_urle(s)
{
    /* This variable is initialised at parse-time */
    auto        plain = $([func ()
                {
                    auto rc, c, C;

                    rc = set();
                    for (c = 'a', C = 'A'; c <= 'z'; ++c, ++C)
                    {
                        rc[tochar(c)] = 1;
                        rc[tochar(C)] = 1;
                    }
                    for (c = '0'; c <= '9'; ++c)
                        rc[tochar(c)] = 1;
                    return rc;
                }]());

    auto rc, c;

    rc = array();
    forall (c in s)
    {
        if (plain[c])
            push(rc, c);
        else
            push(rc, sprintf("%%%02x", toint(c)));
    }
    return implode(rc);
}

/*
 * string = cgi.urle_to_string(string) - decode a "URL" encoded string
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
urle_to_string(s)
{
    static hex = [struct
        ("0") = 0,      ("1") = 1,      ("2") = 2,      ("3") = 3,
        ("4") = 4,      ("5") = 5,      ("6") = 6,      ("7") = 7,
        ("8") = 8,      ("9") = 9,      ("a") = 10,     ("A") = 10,
        ("b") = 11,     ("B") = 11,     ("c") = 12,     ("C") = 12,
        ("d") = 13,     ("D") = 13,     ("e") = 14,     ("E") = 14,
        ("f") = 15,     ("F") = 15
    ];

    auto a;
    s = gsub(s, #\+#, " ");
    while (nels(a = s ~~~ #^([^%]*)%([0-9A-Fa-f])([0-9A-Fa-f])(.*)$#) == 4)
        s = sprintf("%s%c%s", a[0], hex[a[1]] * 16 + hex[a[2]], a[3]);
    return s;
}

/*
 * struct = cgi.form_data([string]) - return form post data
 *
 * This function decodes and returns form post data. The data to be
 * decode may be given as 'string' or may be obtained implicitly
 * according to the particular HTTP request method used by the form:
 * if the method is "GET" the encoded form data is obtained from
 * the QUERY_STRING environment variable; if the method is "POST"
 * the data is read from the standard input.
 *
 * The form data is returned as a struct with key/value pairs
 * corresponding to the form's keys and values.  If a given key
 * appears only once in the form the value is returned as a string,
 * if a given key occurs more than once the value is an array
 * containing the values associated with that key in the form's
 * data.
 *
 * Multipart form encoding is supported through a separate multipart
 * form parser function cgi.multipart_form_data().  If it is known
 * that a form will return its values as a multipart post it may be
 * more efficient to call that function directly especially if the
 * form contains values with a large string representation.
 *
 * This --topic-- forms part of the --ici-cgi-- documentation.
 */
extern
form_data(qs)
{
    auto qs = NULL;

    /*
     * If no explicit query string passed to us then get it. Where we
     * get it from depends on the HTTP method used.
     */
    if (!qs)
    {
        switch (method := getenv("REQUEST_METHOD"))
        {
        case NULL:
            break;

        case "GET":
            qs = getenv("QUERY_STRING");
            break;

        case "POST":
            if (getenv("CONTENT_TYPE") ~ #multipart/form-data#)
            {
                return cgi.multipart_form_data();
            }
            qs = getfile();
            break;

        default:
            fail
            (
                sprintf
                (
                    "don't know how to get query string for HTTP %s method",
                    method
                )
            );
        }
        if (qs == "" || qs == NULL)
            fail("no query string");
    }

    /*
     * Now split it and create a struct with all the key/values in the string
     */
    r := struct();
    f := NULL;
    forall (f in gettokens(qs, "&"))
    {
        f = f ~~~ #^(.*)=(.*)$#;
        k := urle_to_string(f[0]);
        v := urle_to_string(f[1]);
        switch (typeof(r[k]))
        {
        case "NULL":
            r[k] = v;
            break;
        case "string":
            r[k] = array(r[k], v);
            break;
        case "array":
            push(r[k], v);
            break;
        default:
            fail("internal error in cgi.form_data()");
        }
    }
    return r;
}


/*
 * Multipart form data parser
 */

static
strip_cr(str)
{
    len := nels(str) - 1;
    if (len >= 0 && str[len] == "\r")
        str = interval(str, 0, len);
    return str;
}

static
initial_state(input, ctx)
{
    input = strip_cr(input);
    if (input ~ ctx.boundary)
    {
        ctx.hdrs = array();
        return header_state;
    }
}

static
header_state(input, ctx)
{
    input = strip_cr(input);
    if (input == "")
    {
        return body_state;
    }
    else if (input ~ $regexpi("^content-disposition:"))
    {
        if (!(v := input ~~ $regexpi("^content-disposition:(.*)")))
            return;
        form_data := false;
        data_name := NULL;
        file_name := NULL;
        t := NULL;
        forall (t in gettokens(v, "; "))
        {
            if (t == "form-data")
                form_data = true;
            else if (t ~ #^name=#)
                data_name = t ~~ #^name="(.*)"#;
            else if (t ~ #^filename=#)
                file_name = t ~~ #^filename="(.*)"#;
        }
        if (!form_data || data_name == "")
            fail("incorrect content disposition");
        if (file_name)
        {
            ctx.values[data_name + "_file_name"] = file_name;
        }
        if (data_name)
        {
            ctx.values[data_name] = "";
            ctx.curval = data_name;
        }
    }
}

static
body_state(input, ctx)
{
    input = strip_cr(input);
    if (input ~ ctx.sentinel)
    {
        fail("end");
    }
    else if (input ~ ctx.boundary)
    {
        return header_state;
    }
    if (ctx.neednl && ctx.values[ctx.curval] != "")
        ctx.values[ctx.curval] = ctx.values[ctx.curval] + "\n";
    ctx.values[ctx.curval] = ctx.values[ctx.curval] + input;
    ctx.neednl = true;
}

extern
multipart_form_data()
{
    v := gettokens(getenv("CONTENT_TYPE"), "; ");
    if (v[0] != "multipart/form-data")
        fail("Incorrectly invoked");
    if (v[1] !~ #^boundary=#)
        fail(sprintf("Unexpected input: \"%s\"", v[1]));
    boundary := v[1] ~~ #^boundary=(.*)#;
    ctx := struct();
    ctx.boundary = regexp(sprintf("--%s", boundary));
    ctx.sentinel = regexp(sprintf("%s--", boundary));
    ctx.values = struct();
    for (handler := initial_state; line := getline(); )
    {
        try
        {
            if (next := handler(line, ctx))
                handler = next;
        }
        onerror
        {
            if (error == "end")
                break;
            printf(stderr, "post state machine: error = %s\n", error);
            fail(error);
        }
    }
    return ctx.values;
}
