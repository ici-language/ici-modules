/*
 * $Id$
 *
 * Module for performing HTTP requests (such as "GET").
 *
 * The module splits the process of performing the request into a
 * number of phases. Firstly a new request is created and various
 * request attributes set. These attributes are translated into
 * HTTP request headers. Once the request has been prepared it is
 * initiated or sent to the destination and the reply received.
 * Following the reply header being received the user may elect to
 * read the content being returned for the request or to terminate
 * the request.
 *
 * Functions:
 *
 * 	http.proxy(host, port)
 * 		Define the default proxy server settings inherited by
 * 		all new requests. Port may be omitted in which case it
 * 		defaults to the standard HTTP port (80). If host is
 * 		specified as NULL the use of proxy is removed.
 *
 * 	string = http.getproxyhost()
 * 		Returns the default proxy host or NULL if none set.
 *
 * 	string = http.getproxyport()
 * 		Returns the default proxy port or NULL if none set.
 *
 *
 * 	http.request(method, url)
 * 		Create a new HTTP request structure and return it. The
 * 		method and url are required.
 *
 * Constants:
 *
 * 	The various HTTP reply codes are given symbolic names which are
 *	exported from the http module. See the end of this file for the
 *	names. The most commonly used is likely to be http.Okay (200).
 *
 *
 *
 * HTTP Request Objects
 *
 * 	The http.request() function returns a new request object stored
 * 	within an ici struct. Request objects are accessed via a set of
 * 	method functions used with ici's binary-@ operator (method call).
 * 	Request objects respond to methods to get and set their internal
 * 	state and to perform the HTTP request and obtain its results.
 *
 * 	Methods:
 *
 * 	    connect		Initiate the HTTP connection, send the
 *				request and receive the reply leaving
 *				the connection ready for the user to read
 *				any content.
 * 	    disconnect		Tear down the connection to the HTTP server
 *				and arrange the request to be discarded.
 *	    stream		Return a file (read-only) 
 *	    status		Return the status of the HTTP request.
 *
 */

/*
 * Module State
 *
 *	default_proxyhost	The value used to initialise each request
 *				object's proxyhost member. NULL if no proxy
 *				is to be used by default.
 *	default_proxyport	The value used to initialise each request
 *				object's proxyport member. Only used if
 *				default_proxyhost is non-NULL.
 */
static	default_proxyhost;
static	default_proxyport;


/**
 * http.proxy - set default proxy host and port
 */
extern
proxy(host, port)
{
    auto	port = 80;

    default_proxyhost = host;
    if (host == NULL)
	default_proxyport = NULL;
    else
	default_proxyport = port;
}


/**
 * http.getproxyhost - return name of default proxy or NULL if none.
 */
extern
getproxyhost()
{
    return default_proxyhost;
}


/**
 * http.getproxyport - return default proxy port number or NULL if none.
 */
extern
getproxyport()
{
    return default_proxyport;
}


/*
 * stripcr - strip any trailing CR from a string and return the new string
 */
static
stripcr(str)
{
    auto len;

    if (str)
    {
	if ((len = nels(str)) > 0)
	{
	    len = len - 1;
	    if (str[len] == "\r")
		str = interval(str, 0, len);
	}
    }
    return str;
}

/*
 * HTTP request object methods
 */

/**
 * connect - initiate the HTTP request specified in a request object
 *
 * Given the parameters established in the request object this initiates
 * the TCP connection, sends the request and reads the reply status and
 * header. The connection to the server is left open awaiting the user
 * to read the content.
 */
static
connect(self)
{
    auto	addr;
    auto	fto;
    auto	line;
    auto	v;
    auto	uri;

    if (self.skt)
	fail("already connected");

    /*
     * Determine actual host/port to connect to (proxy or server) and the
     * URI we send in the request.
     */
    if (self.proxyhost)
    {
	addr = sprintf("%s@%s", string(self.proxyport), self.proxyhost);
	uri = self.fullurl;
    }
    else
    {
	v = self.fullurl ~~~ #^http://([^/]+)(.*)#;
	addr = v[0];
	uri  = v[1];
	if (addr !~ #:\d+$#)
	    addr = sprintf("http@%s", addr);
	else
	{
	    addr = addr ~~~ #(.*):(\d+)#;
	    addr = sprintf("%s@%s", addr[1], addr[0]);
	}
    }

    /*
     * Connect and obtain stream versions of the socket.
     */
    self.skt = net.connect(net.socket("tcp/ip"), addr);
    self.frm = net.sktopen(self.skt, "rb");
    fto = net.sktopen(self.skt, "wb");

    /*
     * Send the request.
     */
    printf(fto, "%s %s HTTP/1.0\r\n", self.method, uri);
    close(fto);
    net.shutdown(self.skt, 1);

    /*
     * And get the reply.
     */
    self.replyhdr   = struct();
    self.statusline = stripcr(getline(self.frm));
    self.statuscode = int(gettokens(self.statusline)[1]);
    while ((line = stripcr(getline(self.frm))) && line != "")
	if (v = line ~~~ #^([^:]*): *(.*)#)
	    self.replyhdr[v[0]] = v[1];

    return self;
}

/**
 * stream - return a file from which we can read the content
 */
static
stream(self)
{
    if (self.skt)
	return self.frm;

    fail("not connected");
}

/**
 * status - return the HTTP status for the request
 */
static
status(self)
{
    if (self.statuscode != NULL)
	return self.statuscode;

    fail("never connected");
}

/**
 * disconnect - teardown the connection to the HTTP server
 */
static
disconnect(self)
{
    if (!self.skt)
	fail("not connected");

    close(self.frm);
    net.shutdown(self.skt, 0);
    net.close(self.skt);

    self.skt = NULL;

    return self;
}


/*
 * This struct defines the methods available to the request objects.
 */
static
methods = [struct
    connect	= connect,
    disconnect	= disconnect,
    stream	= stream,
    status	= status,
];


/**
 * http.request - create a new HTTP request object
 *
 * Parameters:
 *	method		The method to use in the transfer. This is
 *			a string, usually "GET".
 *	url		The URL to be processed in the request. This
 *			is the full URL including the "http:" scheme
 *			and host portions etc..
 * Returns:
 *	A struct, the new HTTP request object.
 */
extern
request(method, url)
{
    auto	req;

    req = struct(@methods);
    req.method		= method;
    req.fullurl		= url;
    req.hdrs		= array();
    req.proxyhost	= default_proxyhost;
    req.proxyport	= default_proxyport;
    return req;
}


/*
 * HTTP reply codes
 */
extern	OK				= 200;
extern	Okay				= 200;
extern	Created				= 201;
extern	Accepted			= 202;
extern	Provisional_Information		= 203;
extern	No_Content			= 204;
extern	Multiple_Choices		= 300;
extern	Moved_Permanently		= 301;
extern	Moved_Temporaily		= 302;
extern	Method				= 303;
extern	Not_Modified			= 304;
extern	Bad_Request			= 400;
extern	Unauthorised			= 401;
extern	Payment_Required		= 402;
extern	Forbidden			= 403;
extern	Not_Found			= 404;
extern	Method_Not_Allowed		= 405;
extern	None_Acceptable			= 406;
extern	Proxy_Authentication_Required	= 407;
extern	Request_Timeout			= 408;
extern	Conflict			= 409;
extern	Gone				= 410;
extern	Internal_Server_Error		= 500;
extern	Not_Implemented			= 501;
extern	Bad_Gateway			= 502;
extern	Service_Unavailable		= 503;
extern	Gateway_Timeout			= 504;


/**
 * http.status - map an HTTP reply code to a message
 */
extern
status(code)
{
    auto	msg = [struct
	(200) = "OK",
	(201) = "Created",
	(202) = "Accepted",
	(203) = "Provisional Information",
	(204) = "No Content",
	(300) = "Multiple Choices",
	(301) = "Moved Permanently",
	(302) = "Moved Temporaily",
	(303) = "Method",
	(304) = "Not Modified",
	(400) = "Bad Request",
	(401) = "Unauthorised",
	(402) = "Payment Required",
	(403) = "Forbidden",
	(404) = "Not Found",
	(405) = "Method Not Allowed",
	(406) = "None Acceptable",
	(407) = "Proxy Authentication Required",
	(408) = "Request Timeout",
	(409) = "Conflict",
	(410) = "Gone",
	(500) = "Internal Server Error",
	(501) = "Not Implemented",
	(502) = "Bad Gateway",
	(503) = "Service Unavailable",
	(504) = "Gateway Timeout"
    ];

    if (msg[code])
	return msg[code];

    return "Unknown HTTP reply code";
}
