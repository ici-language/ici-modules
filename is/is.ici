//
// $Id$
//
// This module exports various sets that help in testing
// characters against particular classes.  The sets have
// names that mimic C's ctype.h definitions when used with
// autoloading, e.g, is.alpha, is.digit, etc...
//
// The sets contain both string and integer versions of
// the characters allowing use with both strings and
// character codes.  When testing strings it must be
// remembered the sets are being accessed directly and
// only the specific character wanted to be tested be
// used to index the set.
//
// The exported sets should be treated as read-only.  Modifying
// their values will result in undefined behaviour.  The module
// makes use of ICI's initialiser semantics and literal functions
// to call a function at parse time to initialise the sets.
//

//
// is.alpha[int|string]  -  set containing all upper and lower
// case characters as strings and character codes.
//
extern
alpha = [func () {
    s := set();
    for (c := 'a'; c <= 'z'; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
	upper := c + 'A' - 'a';
	s[upper] = true;
	s[tochar(upper)] = true;
    }
    return s;
}
]();

//
// is.alnum[int|string]  -  set containg all upper and lower
// case characters and decimal digits as both character codes
// and strings.
//
extern
alnum = [func () {
     s := copy(alpha);
     auto c;
     for (c = '0'; c <= '9'; ++c)
     {
	 s[c] = true;
	 s[tochar(c)] = true;
     }
     return s;
}]();

//
// is.cntrl
//
extern
cntrl = [func () {
    s := set();
    for (c := 0; c < ' '; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
    }
    return s;
}]();


extern
digit = [func () {
    s := set();
    for (c := '0'; c <= '9'; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
    }
    return s;
}]();

extern
lower = [func () {
    s := set();
    for (c := 'a'; c <= 'z'; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
    }
    return s;
}]();

extern
print = [func () {
    s := set();
    for (c := ' '; c <= '~'; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
    }
    return s;
}]();

extern
space = [set ' ', " ", '\t', "\t", '\n', "\n", '\r', "\r", '\f', "\f"];

extern
punct =  print - (alnum + space);

extern
upper = [func () {
    s := set();
    for (c := 'A'; c <= 'Z'; ++c)
    {
	s[c] = true;
	s[tochar(c)] = true;
    }
    return s;
}]();
