/*
 * $Id: icipath.ici,v 1.3 2002/08/28 00:56:55 atrn Exp $
 *
 * Functions for dealing with file system pathnames,
 *
 *	string = path.separator
 *		A string, the path element separator for this platform.
 *
 *	string = path.join(array | string, ...)
 *		Join N path elements. These are either stored as an
 *		array of strings (as returned by path.split()) or
 *		given as individual string parameters.
 *
 *	 array = path.split(string)
 *		Split a pathname into its elements.
 *
 *	string = path.base(string [, string])
 *	string = path.basename(string [, string])
 *		Return the base portion of a pathname possibly
 *		with a specific extension removed.
 *
 *	string = path.dir(string)
 *	string = path.dirname(string)
 *		Return the directory portion of a filename.
 *
 *	string = path.ext(string)
 *	string = path.extension(string)
 *		Return the "extension" portion of the filename. This
 *		refers to the convention of using suffixes on filenames
 *		to indicate the type of data stored in the file.
 */

extern	separator = "/";

/**
 * path.join - join one or more path name elements
 *
 * SYNOPSIS
 *	string = path.join(string...)
 *
 * DESCRIPTION
 *	The path.join() function concatenates one or more path
 *	name elements separating each with the local system's
 *	directory separator - the value of path.separator.
 */
extern
join(head)
{
    auto	vargs = [array];
    auto	comp;

    if (typeof(head) == "array")
    {
	vargs = interval(head, 1);
	head = head[0];
    }
    forall (comp in vargs)
	head = sprintf("%s%s%s", head, separator, comp);
    return head;
}

/**
 * path.split - split a pathname into separate elements
 *
 * SYNOPSIS
 *	array = path.split(string)
 *
 * DESCRIPTION
 *	The path.split() function separates a pathname into
 *	the various elements according to local file system
 *	rules - it splits the name at each path.separator.
 */
extern
split(path)
{
    return gettokens(path, separator);
}

/**
 * path.base, path.basename - return the base portion of a pathname
 *
 * SYNOPSIS
 *	string = path.base(string)
 *	string = path.basename(string)
 *
 * DESCRIPTION
 *	The form path.basename() is formally deprecated though it
 *	is retained as basename is in common use elsewhere.
 */
extern base, basename;
base = basename = [func (path, ext)
{
    auto	s;
    auto	ext = NULL;

    s = path ~~ $regexp(sprintf(".*%s(.*)", separator));
    if (s == NULL)
	s = path;
    if (ext)
    {
	auto	n;
	n = nels(ext);
	if (n <= nels(s) && interval(s, nels(s) - n) == ext)
	    s = interval(s, 0, nels(s) - n);
    }
    return s;
}];

/**
 * path.dir, path.dirname - return the directory portion of a pathname
 *
 * SYNOPSIS
 *	string = path.dir(string)
 *	string = path.dirname(string)
 *
 * DESCRIPTION
 *	The form path.dirname() is formally deprecated though it
 *	is retained as dirname is in common use elsewhere.
 */
extern dir, dirname;
dir = dirname = [func (path)
{
    auto	s;

    if
    (
	path !~ $regexp(separator)
	||
	!(s = path ~~ $regexp(sprintf("(.*)%s.*$", separator)))
    )
	s = ".";
    return s;
}];

/**
 * path.ext, path.extension - return the extension portion of a pathname
 *
 * SYNOPSIS
 *	string = path.ext(string)
 *	string = path.extension(string)
 *
 * DESCRIPTION
 *	The form path.ext() is the preferred form however the long form,
 *	path.extension, is present for aesethetic reasons (it matches
 *	basename and dirname).
 */
extern ext, extension;
ext = extension = [func (path)
{
    path = path ~~ #.*\.(.*)$#;
    return path ? path : "";
}];



/**
 * path.walk - traverse a directory hierarchy calling some function on each found file
 *
 * SYNOPSIS
 *
 * DESCRIPTION
 */
extern
walk(root, fn, args)
{
    auto args = [array];
    auto name;

    forall (name in sys.dir(root, "d"))
    {
        if (name[0] != ".")
        {
            dname := path.join(root, name);
            walk(dname, fn, args);
        }
    }
    rc := NULL;
    forall (name in sys.dir(root))
    {
        if (name[0] != ".")
        {
            actualname := path.join(root, name);
            if (rc := call(fn, array(actualname) + args))
            {
                break;
            }
        }
    }
    return rc;
}
