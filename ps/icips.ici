/*
 * $Id: icips.ici,v 1.4 2001/06/06 07:11:04 atrn Exp $
 *
 * Module for generating Postscript from ICI.
 */

/*
 * Internal variables.
 */
static	original_stdout = stdout;
static	output = original_stdout;
static	viewer_cmd = "/usr/X11R6/bin/gv %s -"; /* %s for switches */
static	default_pagesize = "a4";
static	job_pagesize = default_pagesize;
static	num_pages;
static	need_fonts;
static	need_showpage;
static	need_endpage;
static	last_page_no;
static	last_page_name;

/*
 * Pick up things from the environment.
 */

if (getenv("ICI_PS_VIEWER_CMD"))
     viewer_cmd = getenv("ICI_PS_VIEWER_CMD");
if (getenv("ICI_PS_PAGE_SIZE"))
     default_pagesize = getenv("ICI_PS_PAGE_SIZE");

/*
 * Utility functions, not exported by the module.
 */

/*
 * Encode a string as a PostScript string literal.
 */
static
encode_string(s)
{
    auto	r;
    auto	c;

    r = array();
    forall (c in s)
    {
	switch (c)
	{
	case "(":
	case ")":
	    push(r, "\\");
	    break;
	}
	push(r, c);
    }
    return implode(r);
}

/**
 * setoutputfile - set the output stream to be used by the PS module
 *
 * This function lets the user set the destination of the PostScript
 * code generated by the module. The function takes a single parameter,
 * a file object which should be open for writing. This file is used as
 * the destination for any PostScript code generated by the PS module.
 * If the argument is NULL or no parameter is passed the output stream
 * is set to the default, the standard output in place at the time the
 * PS module was loaded.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
setoutputfile(f)
{
    if (output != original_stdout)
	try
	    close(output);
	onerror
	    NULL;
    if (f == NULL)
	output = original_stdout;
    output = f;
}

/*
 * stream - return the current output stream
 */
extern
stream()
{
    return output;
}

/**
 * startviewer - direct the output stream to an interactive PostScript viewer
 *
 * The startviewer() function causes the PS module to send the generated
 * PostScript to a PostScript previewing application, e.g., gv or ghostview.
 * The startviewer() function must be called before any other functions
 * for this job as it sets the output file for the PS module for the duration
 * of the job.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
startviewer(opts)
{
    auto opts = "";
    setoutputfile(popen(sprintf(viewer_cmd, opts), "w"));
}

/*
 * Color
 */

/*
 * This bit of trickery arranges for syscolors to be initialised at parse-time
 * by running X11's showrgb and using its output to populate the color database.
 * Each color is represented as an array of three values, R, G & B. The database
 * is a struct that maps color names to these color arrays.
 */
static	syscolors = [func ()
    {
	auto	f, s, t, n, i, c;
	s = struct();
	try
	{
	    f = popen("/usr/X11R6/bin/showrgb");
	    while (t = gettokens(f))
	    {
		/* Color names can have spaces - tokens 4 on need to be gotten */
		c = t[3];
		for (n = nels(t), i = 4; i < n; ++i)
		    c = sprintf("%s %s", c, t[i]);
		s[c] = array(num(t[0]) / 255, num(t[1]) / 255, num(t[2]) / 255);
	    }
	    close(f);
	}
	onerror
	{
	    printf(stderr, "PS: unable to read system colors: %s\n", error);
	    return struct();
	}
	return s;
    }
]();

static	colors = struct(@syscolors);

/**
 * setnamedcolor - define a named color
 *
 * The setnamedcolor() function lets you define a name for a color represented
 * as an (R, G, B) tuple. The name can be used in calls to setrgbcolor() and
 * other functions that usually accept three parameters giving an R, G, B color.
 *
 * The ICI PS module allows applications to use names for colors. The module
 * defines two color dictionaries, the system colors and the user colors. The
 * system colors are derived from the X11 color database (see showrgb(1)) and
 * cannot be modified by the user. The user colors dictionary is initially
 * empty but can be populated by the user using setnamedcolor(). When searching
 * for a named color the system first searches the user's color dictionary
 * then the system color dictionary.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
setnamedcolor(name, r, g, b)
{
    colors[name] = array(r, g, b);
}

/**
 * delnamedcolor - remove a named color from the user's color dictionary
 *
 * Delnamedcolor() lets you remove colors added by setnamedcolor(). This
 * only affects the user's color dictionary, the system dictionary cannot
 * be changed.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
delnamedcolor(name)
{
    del(colors, name);
}

/**
 * getnamedcolor - look up a color in the color dictionary
 *
 * To map a name to a color getnamedcolor() is called. This takes
 * a color name, a string, and returns a color array. An array of
 * three values, the R, G, B values for the color.
 *
 * R, G, B values are floating-point numbers from 0 to 1, 0 being
 * the least intensity, 1 the most.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
getnamedcolor(name)
{
    return @colors[name];
}

/*
 * Traditional PostScript color operations
 */

/**
 * setgray - set the current color to a specific gray level
 */
extern
setgray(g)
{
    setrgbcolor(g, g, g);
}

extern	setgrey = setgray;

extern
setrgbcolor(r, g, b)
{
    auto c;
    auto vargs = [array];

    if (typeof(r) == "string")
    {
	if (!(c = getnamedcolor(r)))
	    fail("No such color");
	r = c[0];
	g = c[1];
	b = c[2];
    }
    printf(output, "%.2f %.2f %.2f setrgbcolor\n", r, g, b);
}

/**
 * Gstate
 */

extern
setdash(a, o)
{
    auto o = 0;
    auto a = [array];

    printf(output, "[");
    auto n;
    forall (n in a)
	printf(output, " %.2f", float(n));
    printf(output, "] %d setdash\n", o);
}

extern
setlinewidth(n)
{
    printf(output, "%.2f setlinewidth\n", float(n));
}

extern
setlinecap(n)
{
    if (typeof(n) == "string")
    {
	cap := [struct
	    butt = 0,
	    round = 1,
	    projecting = 2
	];
	if ((c := cap[n]) == NULL)
	    fail("invalid linecap: " + n);
	n = c;
    }
    printf(output, "%d setlinecap\n", n);
}

extern
setlinejoin(n)
{
    if (typeof(n) == "string")
    {
	cap := [struct
	    miter = 0,
	    round = 1,
	    bevel = 2
	];
	if ((c := cap[n]) == NULL)
	    fail("invalid linecap: " + n);
	n = c;
    }
    printf(output, "%d setlinejoin\n", n);
}

extern
setmiterlimit(n)
{
    printf(output, "%.2f setmiterlimit\n", n);
}


/**
 * moveto - set the current point
 */
extern
moveto(x, y)
{
    printf(output, "%.2f %.2f moveto\n", x, y);
}

/**
 * lineto - draw a straight line
 *
 * Lineto causes a line to drawn from the current point to the
 * given co-ordinate and the current point updated to that position.
 * The line is drawn using the current graphics context.
 */
extern
lineto(x, y)
{
    printf(output, "%.2f %.2f lineto\n", x, y);
}

extern
newpath()
{
    printf(output, "newpath\n");
}

extern
closepath()
{
    printf(output, "closepath\n");
}

extern
stroke()
{
    printf(output, "stroke\n");
}

extern
fill()
{
    printf(output, "fill\n");
}


/**
 * show - output a text string
 *
 * The show() function draws text on the page. It takes a string which
 * is drawn using the current font and graphics context. The string can
 * contain any characters and those considered special by PostScript being
 * escaped as required.
 */
extern
show(s)
{
    printf(output, "(%s) show\n", encode_string(s));
}

/**
 * showpage - output the current page and prepare for the next
 */
extern
showpage()
{
    ++num_pages;
    printf(output, "showpage\n");
    need_showpage = false;
}

/**
 * copypage - output the current page
 */
extern
copypage()
{
    ++num_pages;
    printf(output, "copypage\n");
}

/**
 * font - select a particular font at a particular size.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
font(name, size)
{
    assign(need_fonts, name);
    printf(output, "/%s findfont %.2f scalefont setfont\n", name, size);
}

/**
 * gsave - save the current graphics context
 */
extern
gsave()
{
    printf(output, "gsave\n");
}

/**
 * grestore - restore the most recently saved graphics context.
 */
extern
grestore()
{
    printf(output, "grestore\n");
}


/*
 * CTM
 */
extern
scale(x, y)
{
    if (y == NULL)
	y = x;
    printf(output, "%.2f %.2f scale\n", x, y);
}

extern
translate(x, y)
{
    printf(output, "%.2f %.2f translate\n", x, y);
}

extern
rotate(theta)
{
    printf(output, "%.2f rotate\n", theta);
}

/*
 * DSC stuff
 */

/**
 * startjob - start a new PostScript document.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
startjob(creator, pagesize)
{
    auto	creator = "ICI Postscript module version 1.0";
    auto	pagesize = default_pagesize;

    num_pages = 0;
    need_fonts = set();

    printf
    (
	output,
	"%%!PS-Adobe-3.0\n"
	"%%%%BoundingBox: (atend)\n"
	"%%%%Creator: %s\n"
	"%%%%CreationDate: %s"
	"%%%%DocumentData: Clean7Bit\n"
	"%%%%Pages: (atend)\n"
	"%%%%DocumentFonts: (atend)\n"
	"%%%%DocumentNeedsFonts: (atend)\n"
	"%%%%EndComments\n",

	creator,
	ctime(time())
    );

    job_pagesize = pagesize;
}

/**
 * endjob - end a document started with startjob()
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
endjob()
{
    auto	output_fonts = [func (output, tag, fonts)
    {
	auto	n;
	auto	fn;

	tag = tag + ":";
	n = 0;
	forall (fn in fonts)
	    printf(output, "%%%%%s %s\n", n++ ? "+" : tag, fn);
    }];

    if (need_endpage)
	endpage();

    printf(output, "%%%%Trailer\n");
    printf(output, "%%%%Pages: %d\n", num_pages);
    output_fonts(output, "DocumentFonts", need_fonts);
    output_fonts(output, "DocumentNeedsFonts", need_fonts);

    printf(output, "%%%%EOF\n");

    job_pagesize = default_pagesize;
}

/**
 * startpage - start a new page within the document.
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
startpage(n, s)
{
    if (need_endpage)
	endpage();
    if (typeof(n) != "int")
	n = num_pages + 1;
    if (!s)
	s = sprintf("\"%d\"", n);
    last_page_no = n;
    last_page_name = s;
    need_showpage = true;
    need_endpage = true;
    printf(output, "%%%%Page: %s %d\n", s, n);
    printf(output, "%%%%BeginPaperSize: %s\n%%%%EndPaperSize\n", job_pagesize);
}

/**
 * endpage - end a new page started with startpage().
 *
 * This is an ICI PS extension and is not a PostScript operator.
 */
extern
endpage()
{
    if (need_showpage)
	showpage();
    printf(output, "%%%%EndPage: %s %d\n", last_page_name, last_page_no);
    last_page_no = last_page_name = NULL;
    need_endpage = false;
}
