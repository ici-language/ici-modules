/*
 * $Id: str.ici,v 1.5 2001/03/04 22:59:59 atrn Exp $
 */

extern
capitalise(s)
{
    if (s[0] >= "a" && s[0] <= "z")
	s = str.toupper(s[0]) + interval(s, 1);
    return s;
}

extern	capitalize = capitalise; /* internationalization :) */

extern
plural(word, count, ending)
{
    auto ending = "s";

    if (count != 1)
	word += ending;
    return word;
}

extern
trim(str)
{
    return sub(sub(str, #^ +#, ""), # +$#, "");
}


static	base64_digit	= "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			  "abcdefghijklmnopqrstuvwxyz"
			  "0123456789+/";

static	base64_value	= [struct
    ('A') = 0,    ('B') = 1,    ('C') = 2,    ('D') = 3,
    ('E') = 4,    ('F') = 5,    ('G') = 6,    ('H') = 7,
    ('I') = 8,    ('J') = 9,    ('K') = 10,   ('L') = 11,
    ('M') = 12,   ('N') = 13,   ('O') = 14,   ('P') = 15,
    ('Q') = 16,   ('R') = 17,   ('S') = 18,   ('T') = 19,
    ('U') = 20,   ('V') = 21,   ('W') = 22,   ('X') = 23,
    ('Y') = 24,   ('Z') = 25,   ('a') = 26,   ('b') = 27,
    ('c') = 28,   ('d') = 29,   ('e') = 30,   ('f') = 31,
    ('g') = 32,   ('h') = 33,   ('i') = 34,   ('j') = 35,
    ('k') = 36,   ('l') = 37,   ('m') = 38,   ('n') = 39,
    ('o') = 40,   ('p') = 41,   ('q') = 42,   ('r') = 43,
    ('s') = 44,   ('t') = 45,   ('u') = 46,   ('v') = 47,
    ('w') = 48,   ('x') = 49,   ('y') = 50,   ('z') = 51,
    ('0') = 52,   ('1') = 53,   ('2') = 54,   ('3') = 55,
    ('4') = 56,   ('5') = 57,   ('6') = 58,   ('7') = 59,
    ('8') = 60,   ('9') = 61,   ('+') = 62,   ('/') = 63,
];

extern
base64_encode(src)
{
    for
    (
	src = explode(src), dst = array(), idx = 0, len = nels(src);
	len >= 3;
	idx += 3, len -= 3
    )
    {
	t = (src[idx+0] << 16) | (src[idx+1] << 8) | src[idx+2];
	push(dst, base64_digit[(t >> 18) & 0x3f]);
	push(dst, base64_digit[(t >> 12) & 0x3f]);
	push(dst, base64_digit[(t >>  6) & 0x3f]);
	push(dst, base64_digit[ t        & 0x3f]);
    }
    if (len == 2)
    {
	t = (src[idx+0] << 16) | (src[idx+1] << 8);
	push(dst, base64_digit[(t >> 18) & 0x3f]);
	push(dst, base64_digit[(t >> 12) & 0x3f]);
	push(dst, base64_digit[(t >>  6) & 0x3f]);
	push(dst, '=');
    }
    else if (len == 1)
    {
	t = src[idx+0] << 16;
	push(dst, base64_digit[(t >> 18) & 0x3f]);
	push(dst, base64_digit[(t >> 12) & 0x3f]);
	push(dst, '=');
	push(dst, '=');
    }
    return implode(dst);
}

extern
base64_decode(src)
{
    for
    (
	src = explode(src), dst = array(), idx = 0, len = nels(src);
	len >= 4;
	idx += 4, len -= 4
    )
    {
	if (src[idx+2] == $toint("="))
	{
	    code = (base64_value[src[idx]] << 18) | (base64_value[src[idx+1]] << 12);
	    push(dst, (code >> 16) & 0xff);
	}
	else if (src[idx+3] == $toint("="))
	{
	    code = (base64_value[src[idx]] << 18)
		   | (base64_value[src[idx+1]] << 12)
		   | (base64_value[src[idx+2]] << 6);
	    push(dst, (code >> 16) & 0xff);
	    push(dst, (code >>  8) & 0xff);
	}
	else
	{
	    code = (base64_value[src[idx]] << 18)
		   | (base64_value[src[idx+1]] << 12)
		   | (base64_value[src[idx+2]] << 6)
		   | base64_value[src[idx+3]];
	    push(dst, (code >> 16) & 0xff);
	    push(dst, (code >>  8) & 0xff);
	    push(dst, code & 0xff);
	}
    }
    return implode(dst);
}
