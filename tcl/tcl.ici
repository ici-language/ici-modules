/*
 * tcl.ici - interface between ici and tcl
 *
 * This is the "official" interface to tcl from ici. It wraps the icitcl
 * library with a little sugar to make it more palatable.
 */

/*
 * tcl.str - quote a string to avoid any TCL expansion
 */
tcl.str = [func (a)
{
    a = gsub(a, #\{#, "\\{");
    a = gsub(a, #\}#, "\\}");
    return sprintf("{%s}", a);
}];

/*
 * tcl.escape - escape any Tcl meta-characters in a string.
 */
tcl.escape = [func (str)
{
    auto	c, rc;

    rc = array();
    forall (c in explode(str))
    {
	switch (c)
	{
	case '\\':
	case '"':
	case '$':
	case '[':
	    c = "\\" + tochar(c);
	    break;

	case '\n':
	    c = "\\n";
	    break;
	}
	push(rc, c);
    }
    return implode(rc);
}];

/*
 * Synonyms for the uppercase impaired.
 */
tcl.interpreter	= tcl.Interpreter;
tcl.eval	= tcl.Eval;
tcl.globaleval	= tcl.GlobalEval;
tcl.evalfile	= tcl.EvalFile;
tcl.getvar	= tcl.GetVar;
tcl.getvar2	= tcl.GetVar2;
tcl.setvar	= tcl.SetVar;
tcl.tk_mainloop	= tcl.Tk_MainLoop;

/*
 * tcl - the "execute some Tcl code" function.
 *
 * This is used to evaluate Tcl commands. The function takes a variable number
 * arguments, either strings or arrays of strings. The various string objects
 * are added together with space separators and the result is fed to Tcl.
 * The function returns the Tcl "result" of the operation.
 */
extern
tcl()
{
    auto	vargs = [array];
    auto	cmd;
    auto	arg;

    cmd = "";
    forall (arg in vargs)
    {
	switch (typeof(arg))
	{
	case "array":
	    auto s;
	    s = "";
	    forall (arg in arg)
		s = s + (s != "" ? " " : "") + arg;
	    arg = s;
	    break;

	default:
	    arg = string(arg);
	}
	cmd = cmd + (cmd != "" ? " " : "") + arg;
    }
    if (getenv("ICI_TK_DEBUG"))
	printf(stderr, "%s\n", cmd);
    return Eval(cmd);
}

/*
 * A synonym for tcl() for those who like to make their intentions clear.
 */
extern	tk = tcl;
