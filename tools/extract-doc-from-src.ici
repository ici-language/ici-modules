/*
 * This script extracts and converts suitably marked comments from
 * the source files given on the command line, into one of a number
 * of document formats. It is specificly designed to generate documentation
 * on the external interface of ICI extension modules (as opposed, for
 * example, to documenting the code itself).
 *
 * The extracted comments are automatically marked up with formatting commands
 * based on simple layout conventions. This
 * script generally tries to avoid special markup tags in the source
 * comments. But does want you to use a particular format.
 *
 * Basically, simple block comments like this one are
 * examined. If they contain the text --intro-- they will contribute
 * to the introductory part of the documentation. Alternatively, if they
 * contain the text --topic-- they will contribute to the "detailed"
 * (sorted) section of the documentation. In this case, the first
 * paragraph should be a one line heading for the topic.
 *
 * The module a comment belongs to is indicated by the string
 * --ici-xxx-- in each comment, where xxx is the module name. Normally
 * the last line of a comment will be either:
 *
 * This --intro-- is part of the --ici-xxx-- documentation.
 *
 * or
 *
 * This --topic-- is part of the --ici-xxx-- documentation.
 *
 * But the English is only for the reader and to help remember.
 * Any lines containing these tags are removed.
 *
 * No tabs please. You will be warned if a comment contains tabs.
 *
 * Now, each comment is stripped of its leading " * "s and broken into
 * paragraphs based on blank lines. The paragraphs are then classified
 * into one of:
 *
 * Tagged paragraphs    If the first line is not indented, but there
 *                      is a bunch of spaces in the middle, or, the
 *                      first line ends in a : and the next line is
 *                      indented, this must be a tagged paragraph like
 *                      the one you are reading now.
 *
 *                      Also, if the last paragraph was a tagged paragraph
 *                      and the next one is indented, it must be a
 *                      continuation, like the one you are reading now.
 *
 *                      There are two depths of indentation generated in
 *                      the output, designed to correspond with nominal
 *                      indentations at 6x4space indents (like this one)
 *                      and at 3x4space indents. Basicly, if the first
 *                      indent is > 17, the deep form is used. (These
 *                      would be column 25 and 17 for un-indented comments.)
 *
 * Code "paragraphs"    If the first line is indented, the paragraph is
 *                      assumed to be pre-formatted code. Most code starts
 *                      indented just one extra space from the normal position.
 *
 *                      Also, if the last paragraph was a code paragraph
 *                      and this one is also indented, it must be a
 *                      continuation of it.
 *
 * Body paragraphs      Failing any of those, it must be a simple body
 *                      paragraph.
 *
 * In body and tagged paragraphs, literal text may be enclosed in single
 * quote marks to make it 'italic' (or some similar font change). This is
 * typically used for parameter names. Only paired single quotes on the
 * same line, with non-word characters just outside the potential italic
 * phrase are eligible. Thus you typically don't have to worry about
 * apostrophes. Don't use these in heading or the subjects of tagged
 * paragraphs. They are typically given special font treatment anyway.
 *
 * 'intro' comments are accumulated in the order seen. Thus the order of
 * files on the command line can be significant.
 *
 * 'topic' comments are accumulated and sorted before output (bit of
 * heuristics in the sort comparison).
 *
 * If a comment has the --ici-xxx-- tag, but no --intro-- or --topic-- tag, it
 * is taken to be a continuation of the last one that did.
 */
static myname = rpop(argv);
static mydir = dirname(myname);
static out; /* The output document formatter class. */
static docs = [struct];

/*
 * Read bulk text until one of the chars in 'terms' from the current
 * parse stream. Strip off leading white-space from each line.
 * Return the text.
 */
static
inline_text(term)
{
    t := gettokens(currentfile(), "", term)[0];
    t = gsub(t, #^\s*#, "");
    return gsub(t, #(^|\n) *#, "\\1");
}

static base_class = [class

    open(module) {return fopen(this:fname(module), "w");}
    
    close(file) {super(class).close(file);}
    
    index_frag(module, synopsis)
    {
        return this:tagged(module, synopsis, 0);
    }
];

static html = [class:base_class,

    in_dl = 0,
    
    fname(module) {return sprintf("ici%s.html", module);}

    start(module)
    {
        auto head = inline_text("*");
            <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
            <HTML>
            <HEAD>
                <TITLE>The ICI %s module</TITLE>
                <STYLE TYPE="text/css">
                    BODY {color: black}
                    P {font-size: 12pt; width: 450pt}
                    H1 {font-size: 12pt; font-family: Arial;
                        font-weight: bold}
                    H2 {font-size: 10pt; font-family: Arial;
                        font-style: italic; font-weight: bold}
                    PRE {background: aliceblue}
                    DT {font-style: Italic}
                    DD.DefnIn4cm {width: 337pt; margin-left: 113pt}   
                    DD.DefnIn2cm {width: 396pt; margin-left: 56pt}
                </STYLE>
                <META NAME="Generator" CONTENT="extract-doc-from-src.ici">
                <META NAME="Keywords" CONTENT="ICI">
                <META NAME="Description" CONTENT="ICI extension module documentation">
            </HEAD>
            <BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#FF0000" VLINK="#800000" ALINK="#FF00FF" BACKGROUND="?">
            *
       return sprintf(head, module);
    }
    
    finish() {return "</BODY>\n</HTML>\n";}
    
    italic(str) {return sprintf("<I>%s</I>", str);}
    
    intro_head(module, synopsis)
    {
        if (synopsis)
            s = sprintf("The ICI %s module - %s", module, synopsis);
        else
            s = sprintf("The ICI %s module", module);
        return sprintf("<H1>%s</H1>\n", s);
    }

    topics_head() {return sprintf("<H1>Details</H1>\n");}
    
    heading2(str) {return sprintf("<H2>%s</H2>\n", str);}
    
    code(text)
    {
        /*
         * Indent the code block by 4 spaces, and use <PRE> format.
         */
        return sprintf("<PRE>%s</PRE>\n",
            gsub(text, #(^|\n)(.*)#, "\\1    \\2"));
    }
    
    index(entry, sub_entry) {return "";}

    esc(t)
    {
        t = gsub(t, #&#, "&amp;");
        t = gsub(t, #<#, "&lt;");
        t = gsub(t, #>#, "&gt;");
        t = gsub(t, #"#, "&quot;"); /*"*/
        return t;
    }

    body(text) {return sprintf("<P ALIGN=\"left\">%s</P>\n", text);}

    tagged(subject, body, deep)
    {
        return sprintf("<DT>%s</DT>\n<DD CLASS=\"%s\">%s\n</DD>\n",
            subject, deep ? "DefnIn4cm" : "DefnIn2cm", body);
    }
    
];

static mml = [class:base_class,

    fname(module) {return sprintf("ici%s.mml");}

    start(title) {return "";}
    
    finish() {return "";}

    italic(str) {return sprintf("<italic>%s<noitalic>", str);}
    
    intro_head(module, synopsis)
    {
        if (synopsis)
            s = sprintf("The ICI %s module - %s", module, synopsis);
        else
            s = sprintf("The ICI %s module", module);
        return sprintf("<Heading1>%s\n", s);
    }
    
    topics_head() {return sprintf("<Heading1>Details\n");}
    
    heading2(str) {return sprintf("<Heading2>%s\n", str);}
    
    code(text)
    {
        text = gsub(text, # #, "\\ ");
        text = gsub(text, #\n#, "<HardReturn>\n");
        text = gsub(text, #<HardReturn>\n$#, "\n"); /* But not at end. */
        return sprintf("<CodeIn1cm>\\ %s", text);
    }
    
    index(entry, sub_entry)
    {
        return sprintf("<Marker <MType 2> <MText `%s, %s'> >", entry, sub_entry);
    }
    
    esc(t)
    {
        t = gsub(t, #([<>])#, "\\\1");
        return t;
    }
    
    body(text) {return sprintf("<Body>%s", body);}
    
    tagged(subject, body, deep)
    {
        if (deep)
            tag := "TagIn2cm";
        else
            tag := "TagIn4cm";
        return sprintf("<%s><italic>%s<noitalic><Tab>%s", tag, subject, body);
    }
];

static man = [class:base_class,

    fname(module) {return sprintf("ici%s.1", module);}

    start(title)
    {
        return sprintf
        (
            ".TH ici%s 1 \"The ICI Programming Language\" "
                "\"\" \"The ICI Programming Language\"\n",
            title
        );
    }

    finish()
    {
        return ".SH \"SEE ALSO\"\nici(1), iciex(1)\n";
    }

    italic(str) {return sprintf("\\fI%s\\fP", str);}
    
    intro_head(module, synopsis)
    {
        if (synopsis)
            s = sprintf("The ICI %s module - %s", module, synopsis);
        else
            s = sprintf("The ICI %s module", module);
        return sprintf
        (
            ".SH \"NAME\"\nici%s - %s\n"
            ".SH \"DESCRIPTION\"\n",
            module,
            s
        );
    }

    topics_head() {return ".SH \"DETAILS\"\n";}

    heading2(str) {return sprintf(".SS \"%s\"\n", str);}
    
    code(text)
    {
        text = gsub(text, #'# /*'*/, "\\'");
        return sprintf(".P\n.RS 5\n.nf\n%s\n.fi\n.RE 1\n", text);
    }
    
    index(entry, sub_entry) {return "";}
    
    esc(t)
    {
        t = gsub(t, #\\#, "\\\\");
        return t;
    }
    
    body(text)
    {
        text = gsub(text, #'# /*'*/, "\\'");
        return sprintf(".P\n%s\n", text);
    }
    
    tagged(subject, body, deep)
    {
        body = gsub(body, #'# /*'*/, "\\'");
        if (subject != "")
            return sprintf(".TP %d\n\\fB%s\\fP\n%s\n", 8 + deep * 8, subject, body);
        else
            return sprintf(".IP \"\" %d\n%s\n", 8 + deep * 8, body);
    }

    index_frag(module, synopsis)
    {
        return this:tagged("ici" + module, synopsis, 0);
    }
];

static no_output_class = [class:base_class,

    fname(module) {return NULL;}

    start(title) {return "";}

    finish() {return "";}

    italic(str) {return str;}
    
    intro_head(module, synopsis) {return "";}

    topics_head() {return "";}

    heading2(str) {return "";}
    
    code(text) {return "";}
    
    index(entry, sub_entry) {return "";}
    
    esc(t) {return t;}
    
    body(text) {return "";}
    
    tagged(subject, body, deep) {return "";}

    index_frag(module, synopsis) {return "";}
];

static synopsis = [class:no_output_class,

    fname(module) {return sprintf("%s.synopsis", module);}

    intro_head(module, synopsis) {return synopsis + "\n";}
];

static
usage()
{
    printf(stderr, "usage: ici %s man|html|mml|synopsis source-files...\n", myname);
    exit(1);
}

/*
 * Process the command line...
 */
static raw = 0;
for (;;)
{
    switch (type = rpop(argv))
    {
    case "-v":
        verbose = 1;
        continue;
        
    case "-r":
        raw = 1;
        continue;
        
    case "-o": /* Not used yet */
        if ((out_file = rpop(argv)) == NULL)
            usage();
        continue;
    }
    break;
}
if (type == NULL)
    usage();
    
out = [struct
    man = man,
    html = html,
    mml = mml,
    synopsis = synopsis,
][type];

if (out == NULL)
    usage();
files = argv;

static
font_subs(s)
{
    /*
     * <non-word>'...'<non-word> changes ... to italic and removes the 's.
     */
    s = smash(s, #(^|\n|\W)'([^']+)'(?=(\W|\n|$))#, "\\0", "\\1", "\\2", 1);
    for (i = 2; i < nels(s); i += 3)
        s[i] = out:italic(s[i]);
    return implode(s);
}

/*
 * Neaten up a block of text by rolling all sequences of white space
 * into a single space, and re-wrapping all lines. After this, there is
 * *no* leading or trailing white-space.
 */
static
wrap_n_roll(s)
{
    s = gsub(s, #\s+#, " ");
    s = gsub(s, #((?s).{50}.*?) #, "\\1\n");
    s = s ~~ #\s*((?s).*?)\s*$#;
    return s;
}

forall (file in files)
{
    src := getfile(file);
    if (!raw)
    {
        if (src !~ #--ici-#)
        {
            /*
             * This is not strictly necessary, but skip early if there are
             * no suitbale comments in this file.
             */
            continue;
        }
        /*
         * The following line retrieves all non-indented slash-star comments.
         * Note the in-pattern setting of the DOTALL options with (?s) to allow
         * matching of newlines in slash-star comments and the use of ? to
         * minimise .* (i.e. make it non-greedy and match the first comment
         * end that comes along).
         */
        src = smash(src, #((?s)/\*.*?\*/)#, "\\1");
    }
    else
    {
        src = array(src);
    }
    while (text = rpop(src))
    {
        /*
         * Extract the module this comment applies to, skip the whole
         * gruesome business if there isn't one.
         */
        if ((module = (text ~~ #--ici-(\w+)--#)) == NULL)
            continue;
        if (text ~ #\t#)
            printf("Warning: tabs in comments of module %s.\n", module);
        if (!raw)
        {
            /*
             * Strip the comment text down to its body. This is defined as
             * the lines that start with spaces then a star, minus the spaces,
             * the star, and any single following space. We also strip
             * trailing spaces on lines. Finally, escape special chars
             * as required by the output format.
             */
            text = implode(smash(text, # +\* ?(.*?) *\n#, "\\1\n"));
        }
        text = out:esc(text);

        if (docs[module] == NULL)
        {
            /*
             * This is our first item for this module.
             */
            docs[module] = struct
            (
                /*"title", out:start(module),
                "synopsis", NULL,*/
                "intro", array(),
                "topics", array(),                
            );
            item = NULL;
        }
        module = docs[module];
        if (text ~ #--intro--#)
        {
            if (text ~ #--synopsis--#)
            {
                bits = text ~~~ #\s*(.*)\n\n((?s).*)$#;
                module.synopsis = bits[0];
                text = bits[1];
            }
            push(module.intro, item = strbuf());
        }
        else if (text ~ #--topic--#)
        {
            bits = text ~~~ #\s*([0-9\.]*)\s*(.*)\n\n((?s).*)$#;
            seq = bits[0];
            head = bits[1];
            text = bits[2];
            push(module.topics,
                struct("item", item = strbuf(), "head", head, "seq", seq));
            strcat(item, out:heading2(head));
        }
        if (item == NULL)
            fail(sprintf("don't understand \"%s\"", text ~~ #(.*--ici-.*)\n#));
        /*
         * Remove the api indicator lines.
         */
        text = gsub(text, #.*--ici-.*\n#, "");

        /*
         * Break the text into paragraphs. (?s) to dot newlines, .*? to
         * make non-greedy.
         */
        paras = smash(text, #((?s).*?\n)\n#, "\\1", 1);
        tag = "";
        forall (para in paras)
        {
            if
            (
                para ~ #^\S.* {3} *\S#
                ||
                para ~ #^\S.*:\n {3} *\S#
            )
            {
                /*
                 * Hmm. First line not indented at all, but a big white-space
                 * gap (3 or more space). Or, ends in a : and next line is
                 * indented 3 or more. Must be a tagged paragraph.
                 */
                if (para ~ #^.*:\n#)
                {
                    indent := nels(para ~~ #^.*:\n( +)\S#);
                    subject = para ~~ #^(.*):#;
                    para = para ~~ #^.*:\n((?s).*)$#;
                }
                else
                {
                    indent := nels(para ~~ #^(\S.* {3} *)\S#);
                    subject := interval(para, 0, indent);
                    para = interval(para, indent);
                }
                subject = wrap_n_roll(subject);
                para = wrap_n_roll(para);
                para = font_subs(para);
                deep := indent > 17;
                strcat(item, out:tagged(subject, para, deep));
                last_para = "tagged";
            }
            else if (para ~ #^ {3}# && last_para == "tagged")
            {
                /*
                 * Indented, and last paragraph was a tagged paragraph.
                 * This looks like a continuation.
                 */
                para = font_subs(para);
                para = wrap_n_roll(para);
                strcat(item, out:tagged("", para, deep));
                last_para = "tagged";
            }
            else if (para ~ #^\S#)
            {
                /*
                 * Not indented, but not a tagged paragraph. Must be body.
                 */
                para = font_subs(para);
                para = wrap_n_roll(para);
                strcat(item, out:body(para));
                last_para = "body";
            }
            else
            {
                /*
                 * This must be pre-formatted text.
                 */
                if (last_para != "code")
                {
                    /*
                     * First in a possible sequence. Work out the prevailing
                     * indent.
                     */
                    indent := para ~~ #(^ *)#; 
                }
                para = gsub(para, #\s*$#, "");
                para = gsub(para, regexp("(^|\\n)" + indent), "\\1");
                strcat(item, out:code(para));
                last_para = "code";
            }
        }
    }
}

static
cmp_topics(a, b)
{
    as := a.seq ~ #\d# ? float(a.seq) : 1e6;
    bs := b.seq ~ #\d# ? float(b.seq) : 1e6;
    if (as != bs)
    {
        return cmp(as, bs);
    }
    a = a.head;
    b = b.head;
    if (a ~ #^.*=#)
        a ~~= #^.*=((?s).*)$#;
    if (b ~ #^.*=#)
        b ~~= #^.*=((?s).*)$#;
    a ~~= #\s*((?s).*)$#;
    b ~~= #\s*((?s).*)$#;
    return cmp(a, b);
}

forall (content, mname in docs)
{
    if (content.synopsis != NULL)
    {
        f = fopen(sprintf("%s.%s.frag", mname, type), "w");
        put(out:index_frag(mname, content.synopsis), f);
        close(f);
        f = fopen(sprintf("%s.synopsis", mname), "w");
        put(content.synopsis, f);
        close(f);
    }
    f := out:open(mname);
    put(out:start(mname), f);
    put(out:intro_head(mname, content.synopsis), f);
    put(implode(content.intro), f);
    if (nels(content.topics) > 0)
    {
        put(out:topics_head(), f);
        sort(content.topics, cmp_topics);
        forall (topic in content.topics)
            put(topic.item, f);
    }
    put(out:finish(), f);
    out:close(f);
}
