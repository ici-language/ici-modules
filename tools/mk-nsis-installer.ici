/*
 * Script to read the "install-bits.txt" file which is built by repeated
 * calls to "install-win32.ici" which is called as the "install" program
 * from the various Makefiles built by configure.
 */

/*
 * Read and return text up to an off-square. To enable [text ...].
 */
static
text(f)
{
    return gettoken(f, "]");
}

static head = [text
;
; This is a script to generate a Win32 ICI self-extracting install exe
; using NSIS - the free Nullsoft Installer System for Windows. See:
;
;     http://www.nullsoft.com/free/nsis/
;

;
; The define below is the name we use everywhere - titles, registry keys,
; etc.
;
!define NAME "ICI Programming Language Modules"

Name "${NAME}"
OutFile "ici4-modules-install.exe"

SetDateSave on
;SetOverwrite ifnewer
CRCCheck on

;
; Set the text of the component selection dialog. This has the side
; effect of enabling the component selection dialog.
;
ComponentText "This will install a set of extension modules for ICI \
version 4. There is a separate installer for the core language and SDK. \
The core should be installed first."

;
; Enable and set the text for the install location dialog. Note that we
; use InstallDirRegKey to find the location the *core* ICI is installed
; in, rather than our own previous location.
;
DirShow show
DirText "Select the folder for documentation and related \
files. The core module support will be installed in the Windows \
system directory." " "
InstallDir "$PROGRAMFILES\ICI"
InstallDirRegKey HKLM "SOFTWARE\ICI Programming Language Core" ""



;
; Default section. Always executed. Other sections are only executed if
; the user selects them at install time.
;
Section ""
    SetOutPath "$INSTDIR"
    WriteRegStr HKLM "SOFTWARE\${NAME}" "" "$INSTDIR"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${NAME}" "DisplayName" "${NAME} (remove only)"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${NAME}" "UninstallString" '"$INSTDIR\ici-modules-uninst.exe"'
    WriteUninstaller "ici-modules-uninst.exe"
    StrCpy $0 "No docs"
SectionEnd

Section "Module documentation"
StrCpy $0 "Yes docs"
CreateDirectory "$SMPROGRAMS\ICI Programming Language"
SectionEnd

!macro install_doc DIR NAME
    StrCmp $0 "No docs" no_${NAME}_doc
        SetOutPath "$INSTDIR"
        pop $R1
        File /oname=ici${NAME}.html ${DIR}\ici${NAME}.html
        CreateShortCut "$SMPROGRAMS\ICI Programming Language\ICI ${NAME} module doc.lnk"\
            "$INSTDIR\ici${NAME}.html"
    no_${NAME}_doc:
!macroend

];

static mid = [text
;----------------------------------------------------------------------
; Uninstall stuff. Note that this stuff is logically seperate from the
; install stuff above (for obvious reasons). This runs when the user does
; an uninstall.
;
UninstallText "This will uninstall ${NAME} from your system"

Section Uninstall
    Delete "$INSTDIR\ici-modules-uninst.exe"
];

static tail = [text
    RMDir  "$SMPROGRAMS\ICI Programming Language"
    RMDir  "$PROGRAMFILES\ICI"

    DeleteRegKey HKLM "SOFTWARE\${NAME}"
    DeleteRegKey HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\${NAME}"
SectionEnd
];


bits = gettokens(fopen("install-bits.txt", "r"), "\n", "");
sort(bits);
install = array();
uninstall = array();
prev = "";
forall (b in bits)
{
    if (b == prev)
        continue;
    prev = b;
    if (b ~ #^I#)
        push(install, b ~~ #^I;[^;]*;[0-9];(.*)$#);
    else
        push(uninstall, b ~~ #^U;[^;]*;[0-9];(.*)$#);
}

f = fopen("ici4-modules-install.nsi", "w");
printf(f, "%s", head);
forall (line in install)
    printf(f, "%s\n", line);

printf(f, "%s", mid);
forall (line in uninstall)
    printf(f, "%s\n", line);

printf(f, "%s", tail);