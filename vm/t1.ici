#!/usr/local/bin/ici3

vm.expose();

static
cleanse(s)
{
    rc := array();
    special := [struct
	('\n') = "\\n",
	('\r') = "\\r",
	('\t') = "\\t",
	('\b') = "\\b",
	('\a') = "\\a",
	('\\') = "\\\\",
    ];
    auto ch;
    forall (ch in explode(s))
    {
	if (repl := special[ch])
	    push(rc, repl);
	else if (ch < ' ' || ch > '~')
	    push(rc, sprintf("\\x%02x", ch));
	else
	    push(rc, ch);
    }
    return implode(rc);
}

static addr = 0;

static
p(code, ind)
{
    auto ind = 0;

    for (a := 0, limit := nels(code); a < limit; ++a, ++addr)
    {
	o := code[a];
	switch (t := typeof(o))
	{
	case "src":
	    printf("%04X:\t%*ssource: \"%s\", line: %d", addr, ind, "", o.filename, o.lineno);
	    break;

	case "array":
	    p(o, ind+2);
	    continue;

	case "struct":
	    printf("%04X:\t", addr);
	    printf("%*s[struct\n", ind, "");
	    auto k;
	    kays := sort
	    (
		keys(o),
		[func (a, b)
		{
		    if (typeof(a) != "string")
		        a = string(a);
		    if (typeof(b) != "string")
		        b = string(b);
		    return cmp(a, b);
		}]
	    );
	    forall (k in kays)
		printf("%04X:\t%*s%s => %s\n", addr, ind+2, "", string(k), string(o[k]));
	    printf("%04X:\t%*s]", addr, ind, "");
	    break;

	case "string":
	    printf("%04X:\t", addr);
	    printf("%*spush \"%s\"", ind, "", cleanse(o));
	    break;

	case "regexp":
	    printf("%04X:\t", addr);
	    printf("%*spush #%s#", ind, "", o.pattern);
	    break;

	case "int":
	    printf("%04X:\t", addr);
	    printf("%*spush %d", ind, "", o);
	    break;

	case "float":
	    printf("%04X:\t", addr);
	    printf("%*spush %g", ind, "", o);
	    break;

	case "NULL":
	    printf("%04X:\t", addr);
	    printf("%*spush NULL", ind, "");
	    break;
	    
	default:
	    printf("%04X:\t", addr);
	    printf("%*s%s", ind, "", t);
	    break;

	case "op":
	    n := o.name;
	    switch (n)
	    {
	    case "andand":
		printf("%04X:\t%*s&&", addr, ind, "");
		break;

	    case "binop":
	    case "binop_for_temp":
		tok := vm.binop(o);
		printf("%04X:\t", addr);
		printf("%*s%s \"%s\"", ind, "", n, tok);
		break;

	    case "call":
		printf("%04X:\t%*scall (%d arg%s)", addr, ind, "",
		    o.code, o.code == 1 ? "" : "s");
		break;

	    case "exec":
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
		break;

	    case "ifnotbreak":
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
		break;

	    case "break":
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
		break;

	    case "swap":
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
		break;

	    case "assignlocal":
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
		break;

	    default:
		printf("%04X:\t", addr);
		printf("%*s%s", ind, "", n);
	    }
	    break;
	}
	printf("\n");
    }
}

if (argc != 3)
    exit("usage: t1.ici filename identifier");

file := fopen(argv[1]);
module := struct(struct(struct(copy(externs()))));
parse(file, module);
close(file);
fn := module[argv[2]];

printf("args:\t");
sep := "";
forall (arg in fn.args)
{
    printf("%s%s", sep, arg);
    sep = ", ";
}
args := call(set, fn.args);
printf("\nautos:\t");
sep = "";
auto v, k;
forall (v, k in fn.autos)
{
    if (k == "_funcname_" || (args[k] && !v))
	continue;
    printf("%s%s", sep, k);
    if (v)
	printf(" = %s", string(v));
    sep = ", ";
}
printf("\ncode:\n");
p(fn.code);
