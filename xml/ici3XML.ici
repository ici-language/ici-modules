//
// $Id$
//
// ICI XML parser classes et al.
//


//
// XML.Parser - an XML parser class
//
// This is a wrapper around the ICI xml module which itself is an
// ICI wrapper around James Clark's expat XML parser library. Expat,
// and its ICI wrapper, are used by definining functions that are
// invoked when the parser hits certain input events.  This class
// largely mirrors that interface and takes care of the callback
// registration.
//
// To write an XML parser for a particular document type this
// class is specialised (sub-classed) and the default implementations
// of the parser callbacks replaced with ones suitable for the
// application.
//
//
extern
Parser = [class

    //
    // Create a new instance of an XML parser.  The underlying XML
    // parser is created and the methods of this instance set as
    // its callback functions.
    //
    new()
    {
	this = this:^new();
	this.xml_parser := xml.ParserCreate();
	xml.SetUserData(this.xml_parser, this);
	xml.SetElementHandler(this.xml_parser, this:start_element, this:end_element);
	xml.SetCharacterDataHandler(this.xml_parser, this.character_data);
	xml.SetProcessingInstructionHandler(this.xml_parser, this.processing_instruction);
	xml.SetDefaultHandler(this.xml_parser, this.other_data);
	return this;
    }


    //
    // Ask the parser to parse (the entire content of) a file.
    //
    parse_file(file)
    {
	while (str := getline(file))
	    this:parse_xml(str);
	return this:end_xml_parse();
    }

    //
    // Parse the content of a string.
    //
    parse_xml(str)
    {
	xml.Parse(xml_parser, str, 0);
	return this;
    }

    //
    // Tell the parser there is no more input.
    //
    end_xml_parse()
    {
	xml.Parse(xml_parser, "");
	return this;
    }


    //
    // Parser "callbacks".
    //
    // These are the methods invoked from the parser
    // upon certain input elements being encountered.
    //

    start_element(u, tag, attr)
    {
    }

    end_element(u, tag)
    {
    }

    character_data(u, str)
    {
    }

    processing_instruction(u, str)
    {
    }

    other_data(u, str)
    {
    }


    //
    // Accessors
    //


    //
    // Return the current error code set by the parser.
    //
    error_code()
    {
	return xml.GetErrorCode();
    }

    //
    // Return the current message about any current error.
    //
    error_string()
    {
	return xml.GetErrorString();
    }

    //
    // Return the current input line number
    //
    line_number()
    {
	return xml.GetCurrentLineNumber(xml_parser);
    }

    //
    // Return the current input column number
    //
    column_number()
    {
	return xml.GetCurrentColumnNumber(xml_parser);
    }

    //
    // Return the current input byte count.
    //
    byte_index()
    {
	return xml.GetCurrentByteIndex();
    }

];

