/*
 * $Id: icixml.ici,v 1.2 2000/07/14 10:15:51 atrn Exp $
 *
 * A simple XML interface for ici. This module provides three functions
 * layered atop the expat interface in the C code. The read() function
 * reads an XML stream and returns an in-memory representation as a
 * single ici object. The process() function traverses the in-memory
 * representation, calling user-defined functions for elements with
 * particular tags. Finally, the write() function outputs the in-memory
 * version as an XML stream. When combined these three operations provide
 * a minimal set of functions for processing XML-encoded data. Other
 * methods are of course possible. This was enough for my purposes and
 * seems relatively general and flexible. And it is small enough to make
 * it easy to modify.
 *
 * The stream is returned as an ordered collection of objects. Each
 * is either an element of some kind or character data. Elements
 * themselves contain an ordered collections of nested elements.
 * There is no limit to nesting. Elements also contain a number of
 * attributes which are stored as key/value pairs with both keys and
 * values being strings.
 *
 * Each element is represented as a struct object with a number of
 * key/value pairs. Element attributes appear as string keys that
 * map to strings storing the value of the attribute as presented
 * in the stream. Element meta-data is stored using non-string keys
 * to avoid clashes with the data stream's choice of names. The
 * keys are integers but could be anything other than strings,
 *
 *	ELEMENTS	Maps to an array of nested elements. Each
 *			is a struct.
 *
 *	TAG		Maps to the string XML tag for this element.
 *
 *	ID		Maps to a parser assigned identifier number
 *			for this element. Each element is assigned a
 *			number, unique for the XML stream being
 *			parsed. This is not used in any way by this
 *			module but may be of use by users (it was
 *			added during debugging and never removed).
 *
 * Additionally the "super" of a nested element struct is set to the
 * parent element allowing programs to traverse upwards as well as
 * downwards. Programs need to be careful when setting element
 * attributes that they do not follow the super-struct chain,
 * the assign() function may be used in this case, see start() below.
 */

extern	ELEMENTS = 0;
extern	TAG	 = 1;
extern	ID	 = 2;

extern	PROCESSING_INSTRUCTION  = 0;
extern	OTHER_DATA		= 1;

static	counter;

/*
 * start - start element callback, called via xml.Parse()
 *
 * This is called for each element. We are passed our "user-data"
 * object, the element's tag and a struct containing any attribute/
 * value pairs. We create a new struct to represent the element.
 * This struct has its super set to the current element being parsed.
 * Attributes are assigned into the struct (using the assign()
 * function to avoid modifying attributes in parent elements)
 * and finally the element is pushed onto the end of the current
 * element's array of nested elements. The new element is then made
 * the current element.
 */
static
start(u, tag, attr)
{
    auto 	e, v, k;

    e = struct(u.cursor, TAG, tag, ELEMENTS, array(), ID, counter++);
    forall (v, k in attr)
	assign(e, k, v);
    push(u.cursor[ELEMENTS], e);
    u.cursor = e;
}

/*
 * end - end element callback, called via XML.Parse()
 *
 * This is called at the end of each element. We have little
 * to do but simply set the current element back to the parent
 * of the current value.
 */
static
end(u, tag)
{
    u.cursor = super(u.cursor);
}

/*
 * char - character data callback, called via XML.Parse()
 *
 * This is called for any character data found between elements
 * in the stream. Character data is stored as ici strings in
 * the element's nested element array. All we do is append
 * the character data to the end of that array. The only
 * complication is the concatenation of adjacent character data
 * elements.
 */
static
char(u, s)
{
    auto e;

    e = top(u.cursor[ELEMENTS]);
    if (typeof(e) == "string")
    {
	s = e + s;
	pop(u.cursor[ELEMENTS]);
    }
    push(u.cursor[ELEMENTS], s);
}

/*
 * proc - processing instruction callback, called via XML.Parse()
 *
 * This is called for processing instruction elements found in
 * the stream. The instruction is formed into an array that is
 * appended to the current element's element array.
 */
static
proc(u, s, t)
{
    auto e, t = PROCESSING_INSTRUCTION;

    e = top(u.cursor[ELEMENTS]);
    if (typeof(e) == "array" && e[0] == t)
    {
	s = e[1] + s;
	pop(u.cursor[ELEMENTS]);
    }
    push(u.cursor[ELEMENTS], array(t, s));
}

/*
 * other - other data callback, called via XML.Parse()
 *
 * Like proc() this handles any remaining data in the stream.
 * This is implemented exactly as proc() and in fact uses it.
 */
static
other(u, s)
{
    return proc(u, s, OTHER_DATA);
}

/**
 * read - read a data structure from an XML stream into memory
 *
 * Reads an XML data stream from a file and return an in-memory
 * representation of that stream as an ici object. The data
 * structure retains enough information to be able to output
 * the stream in a compatible manner.
 */
extern
read(file)
{
    auto root, p, s;

    if (!file)
	file = stdin;
    counter = 0;
    root = struct(ELEMENTS, array());
    p = xml.ParserCreate();
    xml.SetUserData(p, struct("cursor", root));
    xml.SetElementHandler(p, start, end);
    xml.SetCharacterDataHandler(p, char);
    xml.SetProcessingInstructionHandler(p, proc);
    xml.SetDefaultHandler(p, other);
    while (s = getline(file))
	xml.Parse(p, s + "\n", 0);
    xml.Parse(p, "");
    return root[ELEMENTS];
}

/**
 * process - process an in-memory XML structure
 *
 * This function traverses the in-memory data structure applying user
 * defined functions to particular elements. Functions are specified
 * using a struct object that maps element tag names to functions that
 * are to process those elements. Each function is called with two
 * parameters, the element and a user-defined parameter.
 */
extern
process(els, map, uarg)
{
    auto	fn;
    auto	e;

    forall (e in els)
    {
	if (typeof(e) == "struct")
	{
	    if ((fn = map[e[TAG]]) != NULL)
		fn(e, uarg);
	    process(e[ELEMENTS], map, uarg);
	}
    }
    return els;
}

/**
 * write - output an in-memory XML data structure to a stream
 *
 * Output the in-memory representation of an XML data object to
 * a stream, by default stdout. The document is output using
 * indentation to show the structure of the data. Spacing is
 * preserved.
 */
extern
write(els, f_out, ind)
{
    auto	f_out, el, v, k, tag, ind = 0;
    
    if (!f_out)
	f_out = stdout;
    forall (el in els)
    {
	switch (typeof(el))
	{
	case "struct":
	    printf(f_out, "%*s<%s", max(ind, 0), "", el[TAG]);
	    forall (v, k in el)
	        if (typeof(k) == "string")
		    printf(f_out, " %s=\"%s\"", k, v);
	    if (nels(el[ELEMENTS]) == 0)
		printf(f_out, "/>\n");
	    else
	    {
		printf(f_out, ">\n");
		write(el[ELEMENTS], f_out, ind + 2);
		printf(f_out, "%*s</%s>\n", max(ind, 0), "", el[TAG]);
	    }
	    break;

	case "array":
	    printf(f_out, "%*s%s", max(ind, 0), "", el[1]);
	    break;

	case "string":
	    if (el !~ #^\s*$#)
		printf(f_out, "%*s%s", max(ind, 0), "", el);
	    break;
	}
    }
}


/*
 * traverse - traverse the in-memory XML document
 *
 * This function is similar to process but simply
 * calls a function on each node.  If the function
 * returns non-NULL the traversal is stopped and
 * that value returned.
 */
extern
traverse(els, fn, uarg)
{
    auto	fn;
    auto	e;
    auto        rc;

    forall (e in els)
    {
	if (typeof(e) == "struct")
	{
	    if (rc = fn(e, uarg))
            {
                break;
            }
	    traverse(e[ELEMENTS], fn, uarg);
	}
    }
    return rc;
}

extern
tag_of(element)
{
    return element[TAG];
}

extern
id_of(element)
{
    return element[ID];
}

extern
elements_of(element)
{
    return element[ELEMENTS];
}

extern
attributes_of(element)
{
    rc = copy(element);
    forall (k in keys(rc))
        if (typeof(k) != "string")
	    del(rc, k);
    return rc;
}

extern
parent_of(element)
{
    return super(element);
}

extern
siblings_of(element)
{
    rc = array();
    if ((p = super(element)) == NULL)
	return NULL;
    forall (el in p[ELEMENTS])
    {
	if (typeof(el) == "struct" && !eq(el, element))
	    push(rc, el);
    }
    return rc;
}

extern
children_of(element)
{
    rc = array();
    forall (el in element[ELEMENTS])
    {
	if (typeof(el) == "struct")
	    push(rc, el);
    }
    return rc;
}

extern
text_of(element)
{
    rc = "";
    forall (el in element[ELEMENTS])
    {
	if (typeof(el) == "string")
	    rc += el;
    }
    return rc;
}

extern
empty_element(tag)
{
    auto tag = "";
    return struct(TAG, tag, ELEMENTS, array(), ID, counter++);
}

extern
set_element_tag(element, tag)
{
    element[TAG] = tag;
}

extern
add_element(element, newel)
{
    push(element[ELEMENTS], new);
}

extern
find_by_tag(root, tag)
{
    if (typeof(root) == "struct")
	root = root[ELEMENTS];
    forall (el in root)
    {
	if (typeof(el) == "struct")
	{
	    if (el[TAG] == tag)
		return el;
	    if (el = find_by_tag(el, tag))
		return el;
	}
    }
}

extern
is_element(e)
{
    return typeof(e) == "struct";
}

extern
is_text(e)
{
    return typeof(e) == "string";
}
